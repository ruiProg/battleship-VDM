class Game
types
	protected State = <Off> | <Start> | <Placed> | <Round>

instance variables
	protected playerA: Player := new Player("Default_1");
	protected playerB: Player := new Player("Default_2");
	protected currPlayer: Player := playerA;
	protected players: set of Player := {playerA, playerB};
	protected currState: State := <Off>;
	
	inv currPlayer in set {playerA, playerB};
	inv playerA in set players;
	inv playerB in set players;
	inv forall p1, p2 in set players & p1 <> p2 => p1.getName() <> p2.getName();
	
operations
		
		-- cria jogo
	public Game: Player`string * Player`string ==> Game
		Game(name1, name2) == (
			playerA := new Player(name1);
			playerB := new Player(name2);
			currPlayer := playerA;
			players := {playerA, playerB};
			return self
		)
		pre currState= <Off> and name1 <> name2
		post card players = 2;
			
		-- cria novo jogador com determinado nome se nome ainda não estiver registado
	public createPlayer: (Player`string) ==> Player
		createPlayer(name) == (
			dcl player: Player := new Player(name);
			players := players union {player};
			return player 
		)
		pre not exists p in set players & p.getName() = name;
		
		--muda os jogadores que vão realizar jogo	
	public changePlayers: Player`string * Player`string ==> ()
		changePlayers(name1, name2) == (
			dcl tmpPlayer: Player := iota p in set players & p.getName() = name1;
			atomic(playerA := tmpPlayer;
			playerB := iota p in set players & p.getName() = name2;
			currPlayer := tmpPlayer;
			);
		)
		pre currState = <Off> and exists p1, p2 in set players & p1.getName() = name1 and p2.getName() = name2;
			
		-- muda o turno para jogar em cada ronda
	public switchTurns: () ==> ()
		switchTurns() == (
			if currPlayer = playerA then currPlayer := playerB
			else currPlayer := playerA
		)
		pre currState <> <Off>;
		
		-- retorna o jogador que aguarda o ataque do adversário
	public getOtherPlayer: () ==> Player
		getOtherPlayer() == (
			if currPlayer = playerA then return playerB
			else return playerA;
		);
			
			-- inicia jogo
	public startGame: () ==> Player`string
		startGame() == (
			playerA.addBoards();
			playerB.addBoards();
			currState := <Start>;
			return "Game started with following players:\n"
			^ playerA.printInfo()
			^ playerB.printInfo() ^ "\n\n\n\n"
			^ currPlayer.printPlacementStatus();	
		)
		pre currState = <Off>;
		
		-- jogador ativo colca os navios no tabuleiro
	public shipPlacement: Board`CellContent * char * nat1 * Board`Direction ==> Player`string
		shipPlacement(ship, colCh, line, dir) == (
			dcl ret: Player`string;
			currPlayer.shipPlacement(ship, colCh, line, dir);
			ret := currPlayer.printPlacementStatus();
			if currPlayer.allShipsPlaced() then(
				switchTurns();
				ret := ret ^ "\n\n\n\n\n";
				if currPlayer.allShipsPlaced() then (
					currState := <Placed>;
					ret := ret ^ "All ships placed\n";
				)
			else ret := ret ^ currPlayer.printPlacementStatus();
			);
			return ret;
		)
		pre currState = <Start>;
		
		-- inicia rondas no jogo
	public startRounds: () ==> Player`string
		startRounds() == (
			playerA.startRounds();
			playerB.startRounds();
			currState := <Round>;
			return currPlayer.printGameStatus();
		)
		pre currState = <Placed>;
		
		-- jogador activo tenta adivinhar posição de um navio adversário
	public guessShipPosition: char * nat1 ==> Player`string
		guessShipPosition(colCh, line) == (
			dcl othPlayer: Player := getOtherPlayer();
			dcl code: Board`CellContent := othPlayer.registerAttack(colCh, line);
			dcl ret: Player`string := [];
			dcl final: bool := currPlayer.registerResult(code, colCh, line);
			if code = <Miss> then (
				ret := ret ^ "\n\nSplash!! You missed!\n";
			 	switchTurns();
			 )
			else if code = <Hit> then ret := ret ^ "\n\nGreat strike\n"
			else ret := ret ^ currPlayer.printTakeDown(code);
			if final then(
				ret := ret ^ currPlayer.printVictory();
				currState := <Off>;
				playerA.clearData();
				playerB.clearData();
				return ret;
			);
			ret := ret ^ "\n\n\n\n\n" ^ currPlayer.printGameStatus();
			return ret;
		)
		pre currState = <Round>;
				
end Game