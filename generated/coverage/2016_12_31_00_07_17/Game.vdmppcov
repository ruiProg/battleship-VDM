class Game
instance variables
	private inGame: bool := false;
	private playerA: Player;
	private playerB: Player;
	private currPlayer: Player;
	private players: set of Player := {};
	
	inv forall p1, p2 in set players & p1 <> p2 => p1.getName() <> p2.getName();
	
operations
		
		public Game: Player`String * Player`String ==> Game
			Game(name1, name2) == (
				playerA := new Player(name1);
				playerB := new Player(name2);
				currPlayer := playerA;
				players := {playerA, playerB};
				return self
			)
			pre not inGame and name1 <> name2 and card players = 0
			post card players = 2;
			
			public createPlayer: (Player`String) ==> Player
				createPlayer(name) == (
					dcl player: Player := new Player(name);
					players := players union {player};
					return player 
			)
			pre not exists p in set players & p.getName() = name;
				
			public changePlayers: Player`String * Player`String ==> ()
				changePlayers(name1, name2) == (
					atomic (playerA := iota p1 in set players & p1.getName() = name1;
					playerB := iota p2 in set players & p2.getName() = name2;
					currPlayer := playerA);
			)
			pre exists p1, p2 in set players & p1.getName() = name1 and p2.getName() = name2;
				
end Game