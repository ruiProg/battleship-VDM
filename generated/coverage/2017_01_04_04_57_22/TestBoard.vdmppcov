class TestBoard is subclass of Board

operations	
	-- todas as células estão vazias ao criar o tabuleiro
	private testCreateBoard : () ==> ()
		testCreateBoard() == (
			dcl b: Board := new Board();
			TestBase`assertEqual(b.countCellType(<Empty>),100);
	);
	
	-- testa mapeamento entre colunas char e seu índice
	private testColMap : () ==> ()
		testColMap() == (
			dcl b: Board := new Board();
			dcl c: Board := new Board();
			TestBase`assertEqual(2,colMap('B'));
			TestBase`assertEqual(2-1,colMap('A'));
			TestBase`assertEqual(2+1,colMap('C'));
			
			b.setComponent(<Cruiser>,1,2);
			c.setComponentCol(<Cruiser>,1,'B');
			TestBase`assertEqual(b.cells(1)(2),c.cells(1)(colMap('B')));
	);
	
	-- testa limites do tabuleiro e disponibilidade de uma célula
	private testEmptyBeforePlacement: () ==> ()
		testEmptyBeforePlacement() == (
		dcl b: Board := new Board();
		b.setComponentCol(<Cruiser>,6,'F');
		TestBase`assertTrue(b.emptyValidCells(2,colMap('C'),<Right>,3));
		TestBase`assertTrue(not b.emptyValidCells(7,colMap('F'),<Up>,3));
		TestBase`assertTrue(not b.emptyValidCells(1,colMap('F'),<Up>,3));
		TestBase`assertTrue(not b.emptyValidCells(1,colMap('A'),<Left>,2));
		TestBase`assertTrue(not b.emptyValidCells(9,colMap('H'),<Down>,3));
		TestBase`assertTrue(not b.emptyValidCells(5,colMap('F'),<Down>,3));
		TestBase`assertTrue(not b.emptyValidCells(6,colMap('C'),<Right>,5));
		TestBase`assertTrue(not b.emptyValidCells(6,colMap('H'),<Left>,4));
		TestBase`assertTrue(not b.emptyValidCells(2,colMap('H'),<Right>,5));
		
		TestBase`assertEqual(b.countCellType(<Submarine>),0);
		TestBase`assertEqual(shipSize(<Submarine>),3);
		b.placeShip(<Submarine>,'C',2,<Right>);
		TestBase`assertEqual(b.countCellType(<Submarine>),3);
		
		b.placeShip(<Carrier>,'J',1,<Down>);
		TestBase`assertEqual(b.countCellType(<Carrier>),5);
		
		b.placeShip(<Destroyer>,'J',9,<Left>);
		TestBase`assertEqual(b.countCellType(<Destroyer>),2);
		
		b.placeShip(<Battleship>,'A',7,<Up>);
		TestBase`assertEqual(b.countCellType(<Battleship>),4);
	);
	
	-- teste simples get da frota
	private testGetShips: () ==> ()
		testGetShips() == (
			dcl b: Board := new Board();
			TestBase`assertEqual(b.getShipsCount(),5);
			TestBase`assertEqual(b.getShips(),{<Carrier>, <Battleship>, <Cruiser>, <Submarine>, <Destroyer>});
	);
	
	-- testa uma tentativa de afundar um navio
	private testRegisterMove: () ==> ()
		testRegisterMove() == (
			dcl b: Board := new Board();
			dcl ret: CellContent := <Empty>;
			b.placeShip(<Submarine>,'C',2,<Right>);
			ret := b.registerMove('A',3);
			TestBase`assertEqual(ret,<Empty>);
			TestBase`assertEqual(b.cells(3)(colMap('A')),<Miss>);
			
			ret := b.registerMove('D',2);
			TestBase`assertEqual(ret,<Submarine>);
			TestBase`assertEqual(b.cells(2)(colMap('D')),<Hit>);
			
			ret := b.registerMove('C',2);
			TestBase`assertEqual(ret,<Submarine>);
			TestBase`assertEqual(b.cells(2)(colMap('C')),<Hit>);
		);
		
	private testPrints: () ==> ()
		testPrints() == (
			TestBase`assertEqual(shipToString(<Carrier>),"Carrier");
			TestBase`assertEqual(cellToString(<Carrier>),"Car");
	);
	
	public run: () ==> ()
		run() == (
			testCreateBoard();
			testColMap();
			testEmptyBeforePlacement();
			testGetShips();
			testRegisterMove();
			testPrints();
	);
end TestBoard