class Player
types
	public String = seq of char;

instance variables
	private name: String;
	private wins: nat;
	private losses: nat;
	private ownBoard: [Board] := nil;
	private enemyBoard: [Board] := nil;
	private shipsToPlace: set of Board`CellContent := {};
	
	inv len name < 256;
	
operations
	public Player: String ==> Player
		Player(nameArg) == (
			name := nameArg;
			wins := 0;
			losses := 0;
			return self
		);
			
	pure public getName : () ==> String
		getName() == return name;
			
	public addBoards : () ==> ()
		addBoards() == (
			ownBoard := new Board();
			enemyBoard := new Board();
			shipsToPlace := ownBoard.getShips();
		)
		pre ownBoard = nil and enemyBoard = nil;
		
	public shipPlacement: Board`CellContent * char * nat1 * Board`Direction ==> ()
		shipPlacement(ship, colCh, line, dir) == (
			ownBoard.placeShip(ship, colCh, line, dir);
			shipsToPlace := shipsToPlace \ {ship}
		)
		pre ship in set shipsToPlace;
	
	public allShipsPlaced: () ==> bool
		allShipsPlaced() == return card shipsToPlace = 0;
	
--- print to console
	
	public printInfo : () ==> String
		printInfo() == return name ^ " (" ^ 
			VDMUtil`val2seq_of_char[nat](wins) ^ "-" ^ 
			VDMUtil`val2seq_of_char[nat](losses) ^ ")\n";
	
	public printPlacementStatus: () ==> Player`String
		printPlacementStatus() == return "Player turn: " ^ name ^ "\n" ^
		"Ships to be placed: " ^ ownBoard.printRemainShips(shipsToPlace) ^ "\n\n" ^
		ownBoard.printBoard();

end Player