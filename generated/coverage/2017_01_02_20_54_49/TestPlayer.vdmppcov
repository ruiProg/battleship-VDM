class TestPlayer is subclass of Player

operations
	private testCreatePlayer: () ==> ()
		testCreatePlayer() == (
		dcl pl: Player := new Player("John");
		TestBase`assertEqual(pl.losses+pl.wins,0);
		TestBase`assertTrue(pl.ownBoard = nil);
		pl.addBoards();
		TestBase`assertTrue(pl.ownBoard <> nil);
		TestBase`assertEqual(pl.getName(),"John");
	);
	
	private testShipPlacement: () ==> ()
		testShipPlacement() == (
		dcl pl: Player := new Player("John");
		pl.addBoards();
		pl.shipPlacement(<Cruiser>,'B',2, <Right>);
		TestBase`assertTrue(pl.ownBoard.countCellType(<Cruiser>) <> 0);
		pl.shipPlacement(<Battleship>,'A',1, <Down>);
		TestBase`assertTrue(not pl.allShipsPlaced());
		pl.shipPlacement(<Carrier>,'J',4, <Left>);
		pl.shipPlacement(<Submarine>,'J',10, <Up>);
		pl.shipPlacement(<Destroyer>,'G',8, <Left>);
		TestBase`assertTrue(pl.allShipsPlaced());
	);
	
	private testAttackResponse: () ==> ()
		testAttackResponse() == (
			dcl pl: Player := new Player("John");
			dcl ret: Board`CellContent := <Empty>;
			dcl nbShips: nat1 := 1;
			dcl nbLosses: nat := pl.losses;
			pl.addBoards();
			pl.shipPlacement(<Cruiser>,'B',2, <Right>);
			pl.shipPlacement(<Battleship>,'A',1, <Down>);
			pl.shipPlacement(<Carrier>,'J',4, <Left>);
			pl.shipPlacement(<Submarine>,'J',10, <Up>);
			pl.shipPlacement(<Destroyer>,'G',8, <Left>);
			pl.startRounds();
			nbShips := card pl.myShips;
			TestBase`assertTrue(nbShips > 0);
			
			ret := pl.registerAttack('A',10);
			TestBase`assertEqual(ret,<Miss>);
			
			ret := pl.registerAttack('G',8);
			TestBase`assertEqual(ret,<Hit>);
			
			ret := pl.registerAttack('F',8);
			TestBase`assertEqual(ret,<Destroyer>);
			TestBase`assertEqual(card pl.myShips,nbShips-1);
			
			ret := pl.registerAttack('J',8);
			ret := pl.registerAttack('J',9);
			ret := pl.registerAttack('J',10);
			
			ret := pl.registerAttack('J',4);
			ret := pl.registerAttack('I',4);
			ret := pl.registerAttack('H',4);
			ret := pl.registerAttack('G',4);
			ret := pl.registerAttack('F',4);
			ret := pl.registerAttack('E',4);
			
			ret := pl.registerAttack('A',1);
			ret := pl.registerAttack('A',2);
		 	ret := pl.registerAttack('A',3);
			ret := pl.registerAttack('A',4);
			
			ret := pl.registerAttack('B',2);
			ret := pl.registerAttack('C',2);
			ret := pl.registerAttack('D',2);
			
			TestBase`assertEqual(pl.losses,nbLosses+1);
			
			pl.clearData();
			TestBase`assertTrue(pl.ownBoard = nil);
	);
	
	private testAttackResult : () ==> ()
		testAttackResult() == (
			dcl pl: Player := new Player("John");
			dcl ret: bool := false;
			dcl nbShips: nat := 0;
			dcl nbWins: nat := pl.wins;
			pl.addBoards();
			pl.startRounds();
			
			nbWins := pl.wins;
			nbShips := card pl.enemiesShips;
			ret := pl.registerResult(<Miss>,'A',5);
			TestBase`assertTrue(not ret);
			ret := pl.registerResult(<Hit>,'D',10);
			TestBase`assertEqual(card pl.enemiesShips, nbShips);
			
			ret := pl.registerResult(<Submarine>,'A',6);
			TestBase`assertEqual(card pl.enemiesShips, nbShips-1);
			
			ret := pl.registerResult(<Cruiser>,'J',2);
			ret := pl.registerResult(<Carrier>,'D',10);
			ret := pl.registerResult(<Destroyer>,'I',6);
			ret := pl.registerResult(<Battleship>,'C',4);
			TestBase`assertTrue(ret);
			TestBase`assertEqual(pl.wins,nbWins+1);
			
	);
	
	public run: () ==> ()
		run() == (
			testCreatePlayer();
			testShipPlacement();
			testAttackResponse();
			testAttackResult();
	);
end TestPlayer