class Board
types
	public CellContent = <Empty> | <Carrier> | <Battleship> | <Cruiser> | <Submarine> | <Destroyer> | <Hit> | <Miss>;
	public Direction = <Up> | <Down> | <Left> | <Right>

instance variables
	private cells: seq of seq of CellContent := [];
	private static shipSize: map CellContent to nat1 := {
		<Carrier> |-> 5, <Battleship> |-> 4, <Cruiser> |-> 3, <Submarine> |-> 3, <Destroyer> |-> 2
	};
	private static colMap: map char to nat1 := {
		'A' |-> 1, 'B' |-> 2, 'C' |-> 3, 'D' |-> 4, 'E' |-> 5, 'F' |-> 6, 'G' |-> 7, 'H' |-> 8, 'I' |-> 9, 'J' |-> 10
	};
	
	inv len cells = 10;
	inv card {i| i in set inds cells & len cells(i) = 10} = 10;
	
operations
	public Board: () ==> Board
		Board() == (
			cells := [[<Empty>| x in set {1,...,10}]| x in set {1,...,10}];
			return self;
		);
		
	public setComponent: CellContent * nat1 * nat1 ==> ()
		setComponent(ship, line, col) == (
			cells(line) := cells(line) ++ {col |-> ship}
		)
		pre col <= 10 and line <= 10;
		
	public emptyValidCells: nat1 * nat1* Direction * nat1 ==> bool
		emptyValidCells(line, col, dir, size) == (
			if dir = <Up> then
				for i = 0 to size - 1 do (
					if col - i <= 0 then return false;
					if cells(line)(col - i) <> <Empty> then return false;
					)
			else if dir = <Down> then
				for i = 0 to size - 1 do (
					if col + i > 10 then return false;
					if cells(line)(col + i) <> <Empty> then return false;
					)
			else if dir = <Left> then
				for i = 0 to size - 1 do (
					if line - i <= 0 then return false;
					if cells(line - 1)(col) <> <Empty> then return false;
					)
			else for i = 0 to size - 1 do (
					if line + i > 10 then return false;
					if cells(line + i)(col) <> <Empty> then return false;
					);
			return true;
		);
		
	pure public countCellType: CellContent ==> nat
		countCellType(type) == (
			dcl sum : nat := 0;
			for i = 1 to len cells do
				for j = 1 to len cells(i) do
					if cells(i)(j) = type then sum := sum + 1;
			return sum;
		);
		
	public placeShip: CellContent * char * nat1 * Direction ==> ()
		placeShip(ship, colCh, line, dir) == (
			dcl col: nat1 := colMap(colCh);
			if dir = <Up> then
				for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col - i, line)
			else if dir = <Down> then
				for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col + i, line)
			else if dir = <Left> then
				for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col, line - i)
			else for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col, line + i)
		)
		pre ship in set dom shipSize
		and colCh in set dom colMap
		and countCellType(ship) = 0
		post countCellType(ship) = shipSize(ship);
		-- check cada cell
		-- check limites
		
		
	
end Board