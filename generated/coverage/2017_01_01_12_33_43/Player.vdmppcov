class Player
types
	public String = seq of char;

instance variables
	private name: String;
	private wins: nat;
	private losses: nat;
	private ownBoard: [Board] := nil;
	private enemyBoard: [Board] := nil;
	private myShips: set of Board`CellContent := {}; -- ships placed and my ships during game (decrease)
	private enemiesShips: set of Board`CellContent := {}; -- enemies ships destroyed (increase)
	
	inv len name < 256;
	
operations
	public Player: String ==> Player
		Player(nameArg) == (
			name := nameArg;
			wins := 0;
			losses := 0;
			return self
		);
			
	pure public getName : () ==> String
		getName() == return name;
			
	public addBoards : () ==> ()
		addBoards() == (
			ownBoard := new Board();
			enemyBoard := new Board();
			myShips := ownBoard.getShips();
		)
		pre ownBoard = nil and enemyBoard = nil;
		
	public shipPlacement: Board`CellContent * char * nat1 * Board`Direction ==> ()
		shipPlacement(ship, colCh, line, dir) == (
			ownBoard.placeShip(ship, colCh, line, dir);
			myShips := myShips \ {ship}
		)
		pre ship in set myShips;
	
	public allShipsPlaced: () ==> bool
		allShipsPlaced() == return card myShips = 0;
	
	public startRounds: () ==> ()
		startRounds () == (
			myShips := ownBoard.getShips();
			enemiesShips := {};
		);
	
	public clearData: () ==> ()
		clearData() == (
			ownBoard := nil;
			enemyBoard := nil;
			myShips := {};
			enemiesShips := {};
		);
	
	public registerAttack: char * nat1 ==> Board`CellContent
		registerAttack(colCh, line) == (
			dcl shipHit : Board`CellContent := ownBoard.registerMove(colCh, line);
			if ownBoard.countCellType(shipHit) = 0 then (
				myShips := myShips \ {shipHit};
				if card myShips = 0 then losses := losses + 1;
				return shipHit;
			)
			else if shipHit <> <Empty> then return <Hit>
			else return <Miss>;
		);
	
	public registerResult: Board`CellContent * char * nat1 ==> bool
		registerResult(code,colCh, line) == (
		if code = <Miss> then enemyBoard.setComponentCol(<Miss>,line,colCh)
		else(
			enemyBoard.setComponentCol(<Hit>,line,colCh);
		 	if code <> <Hit> then enemiesShips := enemiesShips union {code};
		 	if card enemiesShips = enemyBoard.getShipsCount() then(
		 		wins := wins + 1;
		 		return true;
		 	);
		 );
		 return false;
	);
	
--- print to console
	
	public printInfo : () ==> String
		printInfo() == return name ^ " (" ^ 
			VDMUtil`val2seq_of_char[nat](wins) ^ "-" ^ 
			VDMUtil`val2seq_of_char[nat](losses) ^ ")\n";
	
	public printPlacementStatus: () ==> String
		printPlacementStatus() == return "Player turn: " ^ name ^ "\n" ^
		"Ships to be placed: " ^ ownBoard.printRemainShips(myShips) ^ "\n\n" ^
		ownBoard.printBoard();
		
	public printGameStatus : () ==> String
		printGameStatus() == (
			dcl ret: String := "Player turn: " ^ name ^ "\nMy active ships: ";
			for all ship in set myShips do ret := ret ^ ownBoard.shipToString(ship) ^ "   ";
			ret := ret ^ "\nDestroyed enemies ships: ";
			for all ship in set enemiesShips do ret := ret ^ enemyBoard.shipToString(ship) ^ "   ";
			ret := ret ^ "\n\n                                 My ships \t\t\t\t\t\t\t\t\t                Enemy ships\n\n\n";
			ret := ret ^ ownBoard.printParallelBoards(enemyBoard);
			return ret;
		);
			
	public printTakeDown : Board`CellContent ==> String
		printTakeDown(shipDown) == return enemyBoard.shipToString(shipDown) ^ " is sinking\n";
		
	public printVictory : () ==> String
		printVictory() == return "Enemy fleet destroyed. Victory!\n";

end Player