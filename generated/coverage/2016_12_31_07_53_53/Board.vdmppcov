class Board
types
	public CellContent = <Empty> | <Carrier> | <Battleship> | <Cruiser> | <Submarine> | <Destroyer> | <Hit> | <Miss>;
	public Direction = <Up> | <Down> | <Left> | <Right>

instance variables
	private cells: seq of seq of CellContent := [];
	private static shipSize: map CellContent to nat1 := {
		<Carrier> |-> 5, <Battleship> |-> 4, <Cruiser> |-> 3, <Submarine> |-> 3, <Destroyer> |-> 2
	};
	
	inv len cells = 10;
	inv card {i| i in set inds cells & len cells(i) = 10} = 10;
	
operations
	public Board: () ==> Board
		Board() == (
			cells := [[<Empty>| x in set {1,...,10}]| x in set {1,...,10}];
			return self;
		);
		
	public setComponent: CellContent * nat1 * nat1 ==> ()
		setComponent(ship, col, line) == (
			cells(line) := cells(line) ++ {col |-> ship}
		)
		pre col <= 10 and line <= 10;
	
	public placeShip: CellContent * char * nat1 * Direction ==> ()
		placeShip(ship, colCh, line, dir) == (
			dcl col: nat1 := 1;
			if dir = <Up> then
				for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col - i, line)
			else if dir = <Down> then
				for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col + i, line)
			else if dir = <Left> then
				for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col, line - i)
			else for i = 0 to shipSize(ship) - 1 do
					setComponent(ship, col, line + i)
		)
		pre ship in set dom shipSize;
		--count cells to not repeat
		-- set post
		-- check cada cell
		-- check limites
		
		
	
end Board