class TestGame is subclass of Game

operations
	
	private testCreateGame: () ==> ()
		testCreateGame() == (
		dcl g: Game := new Game("John","Diana");
		dcl p: Player:= g.playerA;
		TestBase`assertEqual(card g.players,2);
		
		p:= g.createPlayer("Paul");
		TestBase`assertEqual(card g.players,3);
		TestBase`assertEqual(g.playerA.getName(),"John");
		TestBase`assertEqual(g.playerB.getName(),"Diana");
		
		g.changePlayers("Paul","John");
		TestBase`assertEqual(g.playerA.getName(),"Paul");
		TestBase`assertEqual(g.playerB.getName(),"John");
	);
	
	public testEmplacement: () ==> ()
		testEmplacement() == (
		
		dcl g: Game := new Game("Ana","Paula");
		dcl str: Player`String := [];
		str := g.startGame();
		str := g.shipPlacement(<Submarine>,'C',9,<Right>);
		TestBase`assertEqual(g.currState,<Start>);
		TestBase`assertEqual(g.currPlayer,g.playerA);
		
		str := g.shipPlacement(<Carrier>, 'H', 9, <Up>);
		str := g.shipPlacement(<Cruiser>, 'G',2,<Right>);
		str := g.shipPlacement(<Battleship>,'A',2,<Down>);
		str := g.shipPlacement(<Destroyer>,'C',4,<Down>);
		
		TestBase`assertEqual(g.currState,<Start>);
		TestBase`assertEqual(g.currPlayer,g.playerB);
		
		str := g.shipPlacement(<Submarine>,'C',9,<Right>);
		str := g.shipPlacement(<Carrier>, 'H', 9, <Up>);
		str := g.shipPlacement(<Cruiser>, 'G',2,<Right>);
		str := g.shipPlacement(<Battleship>,'A',2,<Down>);
		str := g.shipPlacement(<Destroyer>,'C',4,<Down>);
		
		TestBase`assertEqual(g.currState,<Placed>);
	);
	
	private testShipGuess: () ==> ()
		testShipGuess() == (
		dcl g: Game := new Game("Ana","Paula");
		dcl str: Player`String := [];
		str := g.startGame();
		str := g.shipPlacement(<Submarine>,'C',9,<Right>);
		str := g.shipPlacement(<Carrier>, 'H', 9, <Up>);
		str := g.shipPlacement(<Cruiser>, 'G',2,<Right>);
		str := g.shipPlacement(<Battleship>,'A',2,<Down>);
		str := g.shipPlacement(<Destroyer>,'C',4,<Down>);
		
		str := g.shipPlacement(<Submarine>,'C',9,<Right>);
		str := g.shipPlacement(<Carrier>, 'H', 9, <Up>);
		str := g.shipPlacement(<Cruiser>, 'G',2,<Right>);
		str := g.shipPlacement(<Battleship>,'A',2,<Down>);
		str := g.shipPlacement(<Destroyer>,'C',4,<Down>);
		str := g.startRounds();
		
		TestBase`assertEqual(g.currPlayer,g.playerA);
		str := g.guessShipPosition('H',1);
		
		TestBase`assertEqual(g.currPlayer,g.playerB);
		str := g.guessShipPosition('C',4);
		TestBase`assertEqual(g.currPlayer,g.playerB);
		str := g.guessShipPosition('C',5);
		str := g.guessShipPosition('C',6);
		
		str := g.guessShipPosition('F',9);
		
		str := g.guessShipPosition('C',9);
		str := g.guessShipPosition('D',9);
		str := g.guessShipPosition('E',9);
		
		str := g.guessShipPosition('A',2);
		str := g.guessShipPosition('A',3);
		str := g.guessShipPosition('A',4);
		str := g.guessShipPosition('A',5);
		
		str := g.guessShipPosition('G',2);
		str := g.guessShipPosition('H',2);
		str := g.guessShipPosition('I',2);
		
		str := g.guessShipPosition('H',9);
		str := g.guessShipPosition('H',8);
		str := g.guessShipPosition('H',7);
		str := g.guessShipPosition('H',6);
		str := g.guessShipPosition('H',5);
		
		TestBase`assertEqual(g.currState,<Off>);
	);
	
	public run: () ==> ()
		run() == (
			testCreateGame();
			testEmplacement();
			testShipGuess();
	);
end TestGame