package battleship;

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2017-01-04 by the VDM++ to JAVA Code Generator
// (v9.0.7 - Thu 29-Sep-2016 22:13:23 +0900)
//
// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "D:\\battleship-VDM\\Board.vdmpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMRunTimeException;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=cells KEEP=NO
  protected volatile List cells = null;
// ***** VDMTOOLS END Name=cells

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile BoardSentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int Board = 0;

    public final int getShips = 1;

    public final int placeShip = 2;

    public final int printBoard = 3;

    public final int cellToString = 4;

    public final int registerMove = 5;

    public final int setComponent = 6;

    public final int shipToString = 7;

    public final int countCellType = 8;

    public final int getShipsCount = 9;

    public final int emptyValidCells = 10;

    public final int setComponentCol = 11;

    public final int printRemainShips = 12;

    public final int printParallelBoards = 13;

    public final int nr_functions = 14;

    public BoardSentinel () throws CGException {}

    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int

// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=shipSize KEEP=NO
  protected static final Map shipSize;
// ***** VDMTOOLS END Name=shipSize

// ***** VDMTOOLS START Name=colMap KEEP=NO
  protected static final Map colMap;
// ***** VDMTOOLS END Name=colMap

// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    Map shipSizetemp = new HashMap();
    Map colMaptemp = new HashMap();
    try {
      Map tmpVal_33 = new HashMap();
      tmpVal_33.put(new quotes.Carrier(), Integer.valueOf(5));
      tmpVal_33.put(new quotes.Battleship(), Integer.valueOf(4));
      tmpVal_33.put(new quotes.Cruiser(), Integer.valueOf(3));
      tmpVal_33.put(new quotes.Submarine(), Integer.valueOf(3));
      tmpVal_33.put(new quotes.Destroyer(), Integer.valueOf(2));
      Map tmpVal_32 = tmpVal_33;
      shipSizetemp = tmpVal_32;
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
    shipSize = shipSizetemp;
    try {
      Map tmpVal_45 = new HashMap();
      tmpVal_45.put(Character.valueOf('A'), Integer.valueOf(1));
      tmpVal_45.put(Character.valueOf('B'), Integer.valueOf(2));
      tmpVal_45.put(Character.valueOf('C'), Integer.valueOf(3));
      tmpVal_45.put(Character.valueOf('D'), Integer.valueOf(4));
      tmpVal_45.put(Character.valueOf('E'), Integer.valueOf(5));
      tmpVal_45.put(Character.valueOf('F'), Integer.valueOf(6));
      tmpVal_45.put(Character.valueOf('G'), Integer.valueOf(7));
      tmpVal_45.put(Character.valueOf('H'), Integer.valueOf(8));
      tmpVal_45.put(Character.valueOf('I'), Integer.valueOf(9));
      tmpVal_45.put(Character.valueOf('J'), Integer.valueOf(10));
      Map tmpVal_44 = tmpVal_45;
      colMaptemp = tmpVal_44;
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
    colMap = colMaptemp;
  }
// ***** VDMTOOLS END Name=static

// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () {
    try {
      setSentinel();
      cells = new ArrayList();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board

// ***** VDMTOOLS START Name=inv_Board KEEP=NO
  public Boolean inv_Board () {
    Boolean rexpr_66 = null;
    if (cells.size() == 10) {
      Set res_s_74 = new HashSet();
      {
        Set riseq_78 = new HashSet();
        for (int i_80 = 1; i_80 <= cells.size(); i_80++) 
          riseq_78.add(Integer.valueOf(i_80));
        Set tmpSet_88 = new HashSet(riseq_78);
        for (Iterator enm_87 = tmpSet_88.iterator(); enm_87.hasNext(); ) {
        	try{
        	final Number i = UTIL.NumberToInt(enm_87.next());
	          if (UTIL.ConvertToList(cells.get(i.intValue() - 1)).size() == 10) {
	            res_s_74.add(i);
	          }
        	}
        	catch (VDMRunTimeException e){
        		 System.out.println(e.getMessage());
        	}
        }
      }
      rexpr_66 = Boolean.valueOf(res_s_74.size() == 10);
    }
    else 
      rexpr_66 = Boolean.FALSE;
    return rexpr_66;
  }
// ***** VDMTOOLS END Name=inv_Board

// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {
    try {
      vdm_init_Board();
      List tmpSeq_2 = new ArrayList();
      for (int count_3 = 1; count_3 <= 10; count_3++) {
        Number x = Integer.valueOf(count_3);
        List tmpSeq_5 = new ArrayList();
        for (int count_6 = 1; count_6 <= 10; count_6++) {
          Number x_1 = Integer.valueOf(count_6);
          tmpSeq_5.add(new quotes.Empty());
        }
        tmpSeq_2.add(tmpSeq_5);
      }
      cells = UTIL.ConvertToList(UTIL.clone(tmpSeq_2));
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board

// ***** VDMTOOLS START Name=setComponent#3|Object|Number|Number KEEP=NO
  public void setComponent (final Object content, final Number line, final Number col) throws CGException {
    sentinel.entering(sentinel.setComponent);
    try {
      if (!this.pre_setComponent(content, line, col).booleanValue()) 
        UTIL.RunTime("Precondition failure in setComponent");
      List rhs_4 = null;
      if ((1 > line.intValue()) || (line.intValue() > cells.size())) 
        UTIL.RunTime("Illegal index");
      Map modmap_9 = new HashMap();
      modmap_9.put(col, content);
      Map modmap_5 = modmap_9;
      rhs_4 = new ArrayList(UTIL.ConvertToList(cells.get(line.intValue() - 1)));
      Map tmpMap_15 = new HashMap(modmap_5);
      for (Iterator enm_16 = tmpMap_15.keySet().iterator(); enm_16.hasNext(); ) {
        Object dom_17 = enm_16.next();
        Number edom_12 = UTIL.NumberToInt(dom_17);
        Object erng_13 = tmpMap_15.get(dom_17);
        if (edom_12.intValue() > rhs_4.size() || edom_12.intValue() < 1) 
          UTIL.RunTime("Illegal index in sequence modifier");
        else 
          rhs_4.set(edom_12.intValue() - 1, erng_13);
      }
      cells.set(((Number)line).intValue() - 1, rhs_4);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
    }
    finally {
      sentinel.leaving(sentinel.setComponent);
    }
  }
// ***** VDMTOOLS END Name=setComponent#3|Object|Number|Number

// ***** VDMTOOLS START Name=pre_setComponent#3|Object|Number|Number KEEP=NO
  public Boolean pre_setComponent (final Object content, final Number line, final Number col) throws CGException {
    return Boolean.valueOf(((col.intValue() <= 10) ? (line.intValue() <= 10) : false) ? (!UTIL.equals(content, new quotes.Empty())) : false);
  }
// ***** VDMTOOLS END Name=pre_setComponent#3|Object|Number|Number

// ***** VDMTOOLS START Name=setComponentCol#3|Object|Number|Character KEEP=NO
  public void setComponentCol (final Object content, final Number line, final Character colCh) throws CGException {
    sentinel.entering(sentinel.setComponentCol);
    try {
      if (!this.pre_setComponentCol(content, line, colCh).booleanValue()) 
        UTIL.RunTime("Precondition failure in setComponentCol");
      setComponent(content, line, UTIL.NumberToInt(colMap.get(colCh)));
    }
    finally {
      sentinel.leaving(sentinel.setComponentCol);
    }
  }
// ***** VDMTOOLS END Name=setComponentCol#3|Object|Number|Character

// ***** VDMTOOLS START Name=pre_setComponentCol#3|Object|Number|Character KEEP=NO
  public Boolean pre_setComponentCol (final Object content, final Number line, final Character colCh) throws CGException {
    return Boolean.valueOf(colMap.containsKey(colCh));
  }
// ***** VDMTOOLS END Name=pre_setComponentCol#3|Object|Number|Character

// ***** VDMTOOLS START Name=emptyValidCells#4|Number|Number|Object|Number KEEP=NO
  public Boolean emptyValidCells (final Number line, final Number col, final Object dir, final Number size) throws CGException {
    sentinel.entering(sentinel.emptyValidCells);
    try {
      if (UTIL.equals(dir, new quotes.Up())) 
        for (int ilb_84 = 0; ilb_84 <= (size.intValue() - 1); ilb_84++) {
          Number i = ilb_84;
          if ((line.intValue() - i.intValue()) <= 0) 
            return Boolean.FALSE;
          if ((1 > (line.intValue() - i.intValue())) || ((line.intValue() - i.intValue()) > cells.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_98 = new ArrayList(UTIL.ConvertToList(cells.get((line.intValue() - i.intValue()) - 1)));
          if ((1 > col.intValue()) || (col.intValue() > argTmp_98.size())) 
            UTIL.RunTime("Illegal index");
          if (!UTIL.equals(argTmp_98.get(col.intValue() - 1), new quotes.Empty())) 
            return Boolean.FALSE;
        }
      else if (UTIL.equals(dir, new quotes.Down())) 
        for (int ilb_62 = 0; ilb_62 <= (size.intValue() - 1); ilb_62++) {
          Number i = ilb_62;
          if ((line.intValue() + i.intValue()) > 10) 
            return Boolean.FALSE;
          if ((1 > (line.intValue() + 1)) || ((line.intValue() + 1) > cells.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_76 = new ArrayList(UTIL.ConvertToList(cells.get((line.intValue() + 1) - 1)));
          if ((1 > col.intValue()) || (col.intValue() > argTmp_76.size())) 
            UTIL.RunTime("Illegal index");
          if (!UTIL.equals(argTmp_76.get(col.intValue() - 1), new quotes.Empty())) 
            return Boolean.FALSE;
        }
      else if (UTIL.equals(dir, new quotes.Left())) 
        for (int ilb_40 = 0; ilb_40 <= (size.intValue() - 1); ilb_40++) {
          Number i = ilb_40;
          if ((col.intValue() - i.intValue()) <= 0) 
            return Boolean.FALSE;
          if ((1 > line.intValue()) || (line.intValue() > cells.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_52 = new ArrayList(UTIL.ConvertToList(cells.get(line.intValue() - 1)));
          if ((1 > (col.intValue() - i.intValue())) || ((col.intValue() - i.intValue()) > argTmp_52.size())) 
            UTIL.RunTime("Illegal index");
          if (!UTIL.equals(argTmp_52.get((col.intValue() - i.intValue()) - 1), new quotes.Empty())) 
            return Boolean.FALSE;
        }
      else 
        for (int ilb_18 = 0; ilb_18 <= (size.intValue() - 1); ilb_18++) {
          Number i = ilb_18;
          if ((col.intValue() + i.intValue()) > 10) 
            return Boolean.FALSE;
          if ((1 > line.intValue()) || (line.intValue() > cells.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_30 = new ArrayList(UTIL.ConvertToList(cells.get(line.intValue() - 1)));
          if ((1 > (col.intValue() + i.intValue())) || ((col.intValue() + i.intValue()) > argTmp_30.size())) 
            UTIL.RunTime("Illegal index");
          if (!UTIL.equals(argTmp_30.get((col.intValue() + i.intValue()) - 1), new quotes.Empty())) 
            return Boolean.FALSE;
        }
      return Boolean.TRUE;
    }
    finally {
      sentinel.leaving(sentinel.emptyValidCells);
    }
  }
// ***** VDMTOOLS END Name=emptyValidCells#4|Number|Number|Object|Number

// ***** VDMTOOLS START Name=countCellType#1|Object KEEP=NO
  public Number countCellType (final Object type) throws CGException {
    sentinel.entering(sentinel.countCellType);
    try {
      Number sum = Integer.valueOf(0);
      for (int ilb_5 = 1; ilb_5 <= cells.size(); ilb_5++) {
        Number i = ilb_5;
        if ((1 > i.intValue()) || (i.intValue() > cells.size())) 
          UTIL.RunTime("Illegal index");
        int iub_12 = UTIL.ConvertToList(cells.get(i.intValue() - 1)).size();
        for (int ilb_11 = 1; ilb_11 <= iub_12; ilb_11++) {
          Number j = ilb_11;
          if ((1 > i.intValue()) || (i.intValue() > cells.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_18 = new ArrayList(UTIL.ConvertToList(cells.get(i.intValue() - 1)));
          if ((1 > j.intValue()) || (j.intValue() > argTmp_18.size())) 
            UTIL.RunTime("Illegal index");
          if (UTIL.equals(argTmp_18.get(j.intValue() - 1), type)) {
            sum = UTIL.NumberToInt(UTIL.clone(Integer.valueOf(sum.intValue() + 1)));
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
      }
      return sum;
    }
    finally {
      sentinel.leaving(sentinel.countCellType);
    }
  }
// ***** VDMTOOLS END Name=countCellType#1|Object

// ***** VDMTOOLS START Name=placeShip#4|Object|Character|Number|Object KEEP=NO
  public void placeShip (final Object ship, final Character colCh, final Number line, final Object dir) throws CGException {
    sentinel.entering(sentinel.placeShip);
    try {
      if (!this.pre_placeShip(ship, colCh, line, dir).booleanValue()) 
        UTIL.RunTime("Precondition failure in placeShip");
      {
        Number col = UTIL.NumberToInt(colMap.get(colCh));
        if (UTIL.equals(dir, new quotes.Up())) 
          for (int ilb_58 = 0; ilb_58 <= (UTIL.NumberToInt(shipSize.get(ship)).intValue() - 1); ilb_58++) {
            Number i = ilb_58;
            setComponent(ship, Integer.valueOf(line.intValue() - i.intValue()), col);
          }
        else if (UTIL.equals(dir, new quotes.Down())) 
          for (int ilb_46 = 0; ilb_46 <= (UTIL.NumberToInt(shipSize.get(ship)).intValue() - 1); ilb_46++) {
            Number i = ilb_46;
            setComponent(ship, Integer.valueOf(line.intValue() + i.intValue()), col);
          }
        else if (UTIL.equals(dir, new quotes.Left())) 
          for (int ilb_34 = 0; ilb_34 <= (UTIL.NumberToInt(shipSize.get(ship)).intValue() - 1); ilb_34++) {
            Number i = ilb_34;
            setComponent(ship, line, Integer.valueOf(col.intValue() - i.intValue()));
          }
        else 
          for (int ilb_22 = 0; ilb_22 <= (UTIL.NumberToInt(shipSize.get(ship)).intValue() - 1); ilb_22++) {
            Number i = ilb_22;
            setComponent(ship, line, Integer.valueOf(col.intValue() + i.intValue()));
          }
      }
    }
    finally {
      sentinel.leaving(sentinel.placeShip);
    }
  }
// ***** VDMTOOLS END Name=placeShip#4|Object|Character|Number|Object

// ***** VDMTOOLS START Name=pre_placeShip#4|Object|Character|Number|Object KEEP=NO
  public Boolean pre_placeShip (final Object ship, final Character colCh, final Number line, final Object dir) throws CGException {
    return Boolean.valueOf(((shipSize.containsKey(ship) ? colMap.containsKey(colCh) : false) ? (countCellType(ship).intValue() == 0) : false) ? emptyValidCells(line, UTIL.NumberToInt(colMap.get(colCh)), dir, UTIL.NumberToInt(shipSize.get(ship))).booleanValue() : false);
  }
// ***** VDMTOOLS END Name=pre_placeShip#4|Object|Character|Number|Object

// ***** VDMTOOLS START Name=getShips KEEP=NO
  public Set getShips () throws CGException {
    sentinel.entering(sentinel.getShips);
    try {
      return new HashSet(shipSize.keySet());
    }
    finally {
      sentinel.leaving(sentinel.getShips);
    }
  }
// ***** VDMTOOLS END Name=getShips

// ***** VDMTOOLS START Name=getShipsCount KEEP=NO
  public Number getShipsCount () throws CGException {
    sentinel.entering(sentinel.getShipsCount);
    try {
      return UTIL.NumberToInt(Integer.valueOf(new HashSet(shipSize.keySet()).size()));
    }
    finally {
      sentinel.leaving(sentinel.getShipsCount);
    }
  }
// ***** VDMTOOLS END Name=getShipsCount

// ***** VDMTOOLS START Name=registerMove#2|Character|Number KEEP=NO
  public Object registerMove (final Character colCh, final Number line) throws CGException {
    sentinel.entering(sentinel.registerMove);
    try {
      if (!this.pre_registerMove(colCh, line).booleanValue()) 
        UTIL.RunTime("Precondition failure in registerMove");
      {
        Number col = UTIL.NumberToInt(colMap.get(colCh));
        Object oldValue = null;
        if ((1 > line.intValue()) || (line.intValue() > cells.size())) 
          UTIL.RunTime("Illegal index");
        List argTmp_8 = new ArrayList(UTIL.ConvertToList(cells.get(line.intValue() - 1)));
        if ((1 > col.intValue()) || (col.intValue() > argTmp_8.size())) 
          UTIL.RunTime("Illegal index");
        oldValue = argTmp_8.get(col.intValue() - 1);
        if (UTIL.equals(oldValue, new quotes.Empty())) {
          List level_21 = null;
          if ((1 > line.intValue()) || (line.intValue() > cells.size())) 
            UTIL.RunTime("Illegal index");
          level_21 = UTIL.ConvertToList(cells.get(line.intValue() - 1));
          level_21.set(((Number)col).intValue() - 1, new quotes.Miss());
          cells.set(((Number)line).intValue() - 1, level_21);
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        else {
          List level_14 = null;
          if ((1 > line.intValue()) || (line.intValue() > cells.size())) 
            UTIL.RunTime("Illegal index");
          level_14 = UTIL.ConvertToList(cells.get(line.intValue() - 1));
          level_14.set(((Number)col).intValue() - 1, new quotes.Hit());
          cells.set(((Number)line).intValue() - 1, level_14);
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        return oldValue;
      }
    }
    finally {
      sentinel.leaving(sentinel.registerMove);
    }
  }
// ***** VDMTOOLS END Name=registerMove#2|Character|Number

// ***** VDMTOOLS START Name=pre_registerMove#2|Character|Number KEEP=NO
  public Boolean pre_registerMove (final Character colCh, final Number line) throws CGException {
    Boolean varRes_3 = null;
    if (colMap.containsKey(colCh)) {
      if ((1 > line.intValue()) || (line.intValue() > cells.size())) 
        UTIL.RunTime("Illegal index");
      List argTmp_12 = new ArrayList(UTIL.ConvertToList(cells.get(line.intValue() - 1)));
      if ((1 > UTIL.NumberToInt(colMap.get(colCh)).intValue()) || (UTIL.NumberToInt(colMap.get(colCh)).intValue() > argTmp_12.size())) 
        UTIL.RunTime("Illegal index");
      Set var2_16 = new HashSet();
      var2_16.add(new quotes.Hit());
      var2_16.add(new quotes.Miss());
      varRes_3 = Boolean.valueOf(!UTIL.Contains(var2_16, argTmp_12.get(UTIL.NumberToInt(colMap.get(colCh)).intValue() - 1)));
    }
    else 
      varRes_3 = Boolean.FALSE;
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_registerMove#2|Character|Number

// ***** VDMTOOLS START Name=shipToString#1|Object KEEP=NO
  public String shipToString (final Object type) throws CGException {
    sentinel.entering(sentinel.shipToString);
    try {
      boolean succ_2 = false;
      {
        succ_2 = (UTIL.equals(type, new quotes.Empty()));
        if (succ_2) {
          return "Empty";
        }
      }
      if (!succ_2) {
        succ_2 = (UTIL.equals(type, new quotes.Carrier()));
        if (succ_2) {
          return "Carrier";
        }
      }
      if (!succ_2) {
        succ_2 = (UTIL.equals(type, new quotes.Battleship()));
        if (succ_2) {
          return "Battleship";
        }
      }
      if (!succ_2) {
        succ_2 = (UTIL.equals(type, new quotes.Cruiser()));
        if (succ_2) {
          return "Cruiser";
        }
      }
      if (!succ_2) {
        succ_2 = (UTIL.equals(type, new quotes.Submarine()));
        if (succ_2) {
          return "Submarine";
        }
      }
      if (!succ_2) {
        succ_2 = (UTIL.equals(type, new quotes.Destroyer()));
        if (succ_2) {
          return "Destroyer";
        }
      }
      if (!succ_2) {
        succ_2 = (UTIL.equals(type, new quotes.Hit()));
        if (succ_2) {
          return "Hit";
        }
      }
      if (!succ_2) {
        succ_2 = (UTIL.equals(type, new quotes.Miss()));
        if (succ_2) {
          return "Miss";
        }
      }
      return "Unknow";
    }
    finally {
      sentinel.leaving(sentinel.shipToString);
    }
  }
// ***** VDMTOOLS END Name=shipToString#1|Object

// ***** VDMTOOLS START Name=cellToString#1|Object KEEP=NO
  public String cellToString (final Object type) throws CGException {
    sentinel.entering(sentinel.cellToString);
    try {
      String fullStr = shipToString(type);
      String tmpSeq_4 = "";
      for (int count_5 = 1; count_5 <= fullStr.length(); count_5++) {
        Number i = Integer.valueOf(count_5);
        if (i.intValue() < 4) {
          tmpSeq_4 = tmpSeq_4 + Character.valueOf(fullStr.charAt(i.intValue() - 1));
        }
      }
      return tmpSeq_4;
    }
    finally {
      sentinel.leaving(sentinel.cellToString);
    }
  }
// ***** VDMTOOLS END Name=cellToString#1|Object

// ***** VDMTOOLS START Name=printBoard KEEP=NO
  public String printBoard () throws CGException {
    sentinel.entering(sentinel.printBoard);
    try {
      String board = "";
      for (int ilb_4 = 1; ilb_4 <= cells.size(); ilb_4++) {
        Number i = ilb_4;
        if (i.intValue() < 10) {
          board = UTIL.ConvertToString(UTIL.clone(board.concat("0")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        board = UTIL.ConvertToString(UTIL.clone(board.concat(VDMUtil.val2seq_of_char(i)).concat("    ")));
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        if ((1 > i.intValue()) || (i.intValue() > cells.size())) 
          UTIL.RunTime("Illegal index");
        int iub_23 = UTIL.ConvertToList(cells.get(i.intValue() - 1)).size();
        for (int ilb_22 = 1; ilb_22 <= iub_23; ilb_22++) {
          Number j = ilb_22;
          if ((1 > i.intValue()) || (i.intValue() > cells.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_32 = new ArrayList(UTIL.ConvertToList(cells.get(i.intValue() - 1)));
          if ((1 > j.intValue()) || (j.intValue() > argTmp_32.size())) 
            UTIL.RunTime("Illegal index");
          board = UTIL.ConvertToString(UTIL.clone(board.concat(cellToString(argTmp_32.get(j.intValue() - 1))).concat("    ")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        board = UTIL.ConvertToString(UTIL.clone(board.concat("\n")));
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
      }
      return new String("      A      B      C      D      E      F      G      H      I      J    \n\n").concat(board);
    }
    finally {
      sentinel.leaving(sentinel.printBoard);
    }
  }
// ***** VDMTOOLS END Name=printBoard

// ***** VDMTOOLS START Name=printParallelBoards#1|Board KEEP=NO
  public String printParallelBoards (final Board enemyBoard) throws CGException {
    sentinel.entering(sentinel.printParallelBoards);
    try {
      String pBoard = "";
      for (int ilb_5 = 1; ilb_5 <= cells.size(); ilb_5++) {
        Number i = ilb_5;
        if (i.intValue() < 10) {
          pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat("0")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat(VDMUtil.val2seq_of_char(i)).concat("    ")));
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        if ((1 > i.intValue()) || (i.intValue() > cells.size())) 
          UTIL.RunTime("Illegal index");
        int iub_24 = UTIL.ConvertToList(cells.get(i.intValue() - 1)).size();
        for (int ilb_23 = 1; ilb_23 <= iub_24; ilb_23++) {
          Number j = ilb_23;
          if ((1 > i.intValue()) || (i.intValue() > cells.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_33 = new ArrayList(UTIL.ConvertToList(cells.get(i.intValue() - 1)));
          if ((1 > j.intValue()) || (j.intValue() > argTmp_33.size())) 
            UTIL.RunTime("Illegal index");
          pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat(cellToString(argTmp_33.get(j.intValue() - 1))).concat("    ")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat("\t\t\t")));
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        if (i.intValue() < 10) {
          pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat("0")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat(VDMUtil.val2seq_of_char(i)).concat("    ")));
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        List argTmp_56 = new ArrayList((enemyBoard.cells));
        if ((1 > i.intValue()) || (i.intValue() > argTmp_56.size())) 
          UTIL.RunTime("Illegal index");
        int iub_59 = UTIL.ConvertToList(argTmp_56.get(i.intValue() - 1)).size();
        for (int ilb_58 = 1; ilb_58 <= iub_59; ilb_58++) {
          Number j = ilb_58;
          List argTmp_68 = new ArrayList((enemyBoard.cells));
          if ((1 > i.intValue()) || (i.intValue() > argTmp_68.size())) 
            UTIL.RunTime("Illegal index");
          List argTmp_70 = new ArrayList(UTIL.ConvertToList(argTmp_68.get(i.intValue() - 1)));
          if ((1 > j.intValue()) || (j.intValue() > argTmp_70.size())) 
            UTIL.RunTime("Illegal index");
          pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat(cellToString(argTmp_70.get(j.intValue() - 1))).concat("    ")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        pBoard = UTIL.ConvertToString(UTIL.clone(pBoard.concat("\n")));
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
      }
      return new String("      A      B      C      D      E      F      G      H      I      J    ").concat("\t\t\t").concat("      A      B      C      D      E      F      G      H      I      J    \n\n").concat(pBoard);
    }
    finally {
      sentinel.leaving(sentinel.printParallelBoards);
    }
  }
// ***** VDMTOOLS END Name=printParallelBoards#1|Board

// ***** VDMTOOLS START Name=printRemainShips#1|Set KEEP=NO
  public String printRemainShips (final Set ships) throws CGException {
    sentinel.entering(sentinel.printRemainShips);
    try {
      String res = "";
      {
        Set tmpSet_20 = new HashSet(ships);
        for (Iterator enm_19 = tmpSet_20.iterator(); enm_19.hasNext(); ) {
          final Object ship = enm_19.next();
          res = UTIL.ConvertToString(UTIL.clone(res.concat(shipToString(ship)).concat(": ").concat(VDMUtil.val2seq_of_char(UTIL.NumberToInt(shipSize.get(ship)))).concat("    ")));
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
      }
      return res;
    }
    finally {
      sentinel.leaving(sentinel.printRemainShips);
    }
  }
// ***** VDMTOOLS END Name=printRemainShips#1|Set

}

